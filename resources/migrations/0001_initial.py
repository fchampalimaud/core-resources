# Generated by Django 2.2.1 on 2019-06-07 07:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('humanresources', '0001_initial'),
        ('research', '0001_initial'),
        ('supplier', '0001_initial'),
        ('biosafety', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EquipmentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'verbose_name': 'Equipment Category',
                'verbose_name_plural': 'Equipment Categories',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('req_access', models.BooleanField(default=False, verbose_name='Require access')),
                ('access_req', models.TextField(blank=True, null=True, verbose_name='Access requirements')),
                ('biosafety_risks', models.ManyToManyField(to='biosafety.Risk')),
                ('managers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.Resource')),
            ],
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.Resource')),
                ('level', models.SmallIntegerField(unique=True)),
                ('at_building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Building', verbose_name='Building')),
            ],
            options={
                'ordering': ('-level',),
            },
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='ResourceAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Start')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End')),
                ('created_on', models.DateTimeField(auto_now=True, verbose_name='Created on')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resourceaccess_creator', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(limit_choices_to={'req_access': True}, on_delete=django.db.models.deletion.CASCADE, to='resources.Resource')),
                ('revoked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resourceaccess_revoker', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resource access',
                'verbose_name_plural': 'Resource accesses',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('contract_file', models.FileField(blank=True, upload_to='resources/maintenance/contracts')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='supplier.Supplier')),
                ('resources', models.ManyToManyField(related_name='maintenance_contracts', to='resources.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_type', models.IntegerField(choices=[(0, 'Corrective'), (1, 'Predictive'), (2, 'Preventive')], default=2)),
                ('date', models.DateField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=6)),
                ('notes', models.TextField(blank=True)),
                ('quote_file', models.FileField(blank=True, upload_to='resources/maintenance/quotes')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='supplier.Supplier')),
                ('contract', models.ForeignKey(blank=True, help_text='Select a Maintenance Contract covering this service.', null=True, on_delete=django.db.models.deletion.CASCADE, to='resources.MaintenanceContract')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(max_length=150, upload_to='resources/images')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='AccessRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_on', models.DateTimeField(auto_now_add=True)),
                ('closed_on', models.DateTimeField(blank=True, null=True, verbose_name='Closed on')),
                ('reason', models.TextField(blank=True, help_text='Why and how you want to access the resource. Describe also if you fulfill the access requirements.', verbose_name='Access details')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='resources.ResourceAccess')),
                ('closed_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='access_closer', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='access_requester', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(limit_choices_to={'req_access': True}, on_delete=django.db.models.deletion.CASCADE, to='resources.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.Resource')),
                ('biosafety_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biosafety.Level')),
                ('building_floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Floor', verbose_name='Floor')),
            ],
            options={
                'ordering': ('-building_floor__level', 'name'),
            },
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.Resource')),
                ('brand', models.CharField(max_length=80)),
                ('product_number', models.CharField(max_length=80, verbose_name='Model / Product Number')),
                ('url', models.URLField(blank=True, verbose_name='URL')),
                ('notes', models.TextField(blank=True)),
                ('uses_external_booking', models.BooleanField(default=False, help_text='e.g. iLab, Agendo')),
                ('is_missing', models.BooleanField(default=False, help_text='Use the notes field to provide more information.', verbose_name='Out for repair / outreach events')),
                ('acquisition_date', models.DateField(blank=True, null=True)),
                ('warranty', models.PositiveSmallIntegerField(blank=True, help_text='years', null=True)),
                ('disposal_date', models.DateField(blank=True, null=True)),
                ('an', models.CharField(blank=True, max_length=50, verbose_name='Asset Number')),
                ('sn', models.CharField(max_length=50, verbose_name='Serial Number')),
                ('sop', models.FileField(blank=True, upload_to='equipment/sop', verbose_name='Standard Operating Procedure')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.EquipmentCategory')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='supplier.Supplier')),
                ('groups', models.ManyToManyField(blank=True, help_text='Leave blank for common use equipment.', related_name='equipments', to='research.Group')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Room')),
                ('responsible', models.ForeignKey(blank=True, help_text='The person you should contact first', null=True, on_delete=django.db.models.deletion.CASCADE, to='humanresources.Person')),
            ],
            options={
                'verbose_name': 'Equipment',
            },
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.Resource')),
                ('rooms', models.ManyToManyField(blank=True, help_text='The rooms assigned to this area. A user with access to this area will have access to its rooms.', related_name='areas', to='resources.Room', verbose_name='rooms')),
                ('sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subareas', to='resources.Area')),
            ],
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='EquipmentSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.CharField(help_text='1-9', max_length=1, validators=[django.core.validators.RegexValidator(message='Must be a number', regex='^[0-9]$')], verbose_name='row')),
                ('col', models.CharField(help_text='A-Z', max_length=1, validators=[django.core.validators.RegexValidator(message='Must be a capital letter', regex='^[A-Z]$')], verbose_name='column')),
                ('owners', models.ManyToManyField(to='research.Group')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.Equipment')),
            ],
            options={
                'verbose_name': 'Equipment section',
                'ordering': ('equipment', 'col', 'row'),
                'unique_together': {('equipment', 'row', 'col')},
            },
        ),
    ]
